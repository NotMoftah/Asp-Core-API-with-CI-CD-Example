Parameters:
  VpcCidrBlock:
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/(1[6-9]|2[0-8]))$
    Default: 10.40.0.0/16
    Description: VPC CIDR Block. Default is 10.0.0.0/16
    Type: String
    
  SubnetPublicACidr:
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/(1[6-9]|2[0-8]))$
    Default: 10.40.1.0/24
    Description: CIDR Block for public subnet of AZ a
    Type: String
  SubnetPublicBCidr:
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/(1[6-9]|2[0-8]))$
    Default: 10.40.2.0/24
    Description: CIDR Block for public subnet of AZ b
    Type: String
Resources:
  # MainVPC resource with full DNS support
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
  
  # Subnets configuration
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MainVPC
      CidrBlock: !Ref SubnetPublicACidr
      AvailabilityZone: !Join
        - ''
        - - !Ref AWS::Region
          - a
      MapPublicIpOnLaunch: 'true'
      Tags: 
        - Key: Name
          Value: SubnetPublicA
        - Key: AZ
          Value: ZoneA

  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MainVPC
      CidrBlock: !Ref SubnetPublicBCidr
      AvailabilityZone: !Join
        - ''
        - - !Ref AWS::Region
          - b
      MapPublicIpOnLaunch: 'true'
      Tags: 
        - Key: Name
          Value: SubnetPublicB
        - Key: AZ
          Value: ZoneB
        - Key: SubnetInterfaceType
          Value: Public

  # Internet gateway configuration
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MainVPC
  
  # Route Tables configuration
  # Public Route
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
  PublicInternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicB
  
  # Public NACL
  DefaultNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId: !Ref MainVPC
  
  # Inbound 
  NaclAllTrafficInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DefaultNacl
      RuleNumber: 80
      Egress: false
      Protocol: -1
      PortRange: 
        From: 0
        To: 65535
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  # Outbound 
  NaclAllTrafficOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DefaultNacl
      RuleNumber: 80
      Egress: true
      Protocol: -1
      PortRange: 
        From: 0
        To: 65535
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
 
  # Subnets NACL Associations
  SubnetPublicANacl:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref DefaultNacl
      SubnetId: !Ref SubnetPublicA
  SubnetPublicBNacl:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref DefaultNacl
      SubnetId: !Ref SubnetPublicB


Outputs:
  VPCID:
    Value: !Ref MainVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  
  PublicASubnetId:
    Value: !Ref SubnetPublicA
    Export:
      Name: !Sub "${AWS::StackName}-PublicASubnetId"
  PublicBSubnetId:
    Value: !Ref SubnetPublicB
    Export:
      Name: !Sub "${AWS::StackName}-PublicBSubnetId"
